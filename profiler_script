#!/bin/bash

#inform user 
printf "\\nTo exit at any time type \"kill -USR1 %s\"" $$

#trap signal, call close sequence
trap close USR1

#define close sequence
close() { 

#inform user
printf "\\n-  -   -   -   -   -   -   - SAVING - -   -   -   -   -   -   -   -   "

#delay for user to readability
sleep 1

#get cpu temp, format data and save to log
CPUTEMP=$(awk '{print $1}' /sys/class/thermal/thermal_zone0/temp | cut -c1-2 ).$(awk '{print $1}' /sys/class/thermal/thermal_zone0/temp | cut -c3-4)

#save output to logfile
echo "$SECINC" "$CPUTEMP" >> ./logs/cputemp.dat

#get gpu temp, format data and save to log
GPUTMP=$( (vcgencmd measure_temp) | cut -c6-9) 

#save output to logfile
echo "$SECINC" "$GPUTMP" >> ./logs/gputemp.dat

#get cpu freq, format data and save to log
CLOCKHZ=$( (vcgencmd measure_clock arm) | cut -c15-25) 

#MHZ divisor
MHZDV=100000000 

#processing data to represent MHZ
CLKMHZ=$((CLOCKHZ / MHZDV)) 

#save output to logfile
echo "$SECINC" "$CLKMHZ" >> ./logs/cpufreq.dat

#retrieve data, extract desired elements, format and assign to variable
MMTOE=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$1}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMTO"  >> ./logs/mmto.dat

#retrieve data, extract desired elements, format and assign to variable
MMUS=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$2}" | cut -c 1-2 )

#save output to logfile
echo "$SECINC" "$MMUS"  >> ./logs/mmus.dat

#retrieve data, extract desired elements, format and assign to variable
MMFR=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$3}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMFR"  >> ./logs/mmfr.dat

#retrieve data, extract desired elements, format and assign to variable
MMSH=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$4}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMSH"  >> ./logs/mmsh.dat

#retrieve data, extract desired elements, format and assign to variable
MMCA=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$5}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMCA"  >> ./logs/mmca.dat

#retrieve data, extract desired elements, format and assign to variable
MMAV=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$6}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMAV"  >> ./logs/mmav.dat

#retrieve data, extract desired elements, format and assign to variable
MSWTO=$( free -h | cut -c13-80 | awk "(FNR>2 && FNR<4)" | awk "{ print \$1}" | cut -c 1-2 )

#save output to logfile
echo "$SECINC" "$MSWTO"  >> ./logs/mmswto.dat

#retrieve data, extract desired elements, format and assign to variable
MSWUS=$( free -h | cut -c13-80 | awk "(FNR>2 && FNR<4)" | awk "{ print \$2}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MSWUS"  >> ./logs/mswus.dat

#retrieve data, extract desired elements, format and assign to variable
MSWFR=$( free -h | cut -c13-80 | awk "(FNR>2 && FNR<4)" | awk "{ print \$3}" | cut -c 1-2 )

#save output to logfile
echo "$SECINC" "$MSWFR"  >> ./logs/mmswfr.dat

#retrieve data, extract desired elements, format and assign to variable
CPUUUSR=$(mpstat | awk 'FNR == 4 {print}' | awk "{ print \$3}")

#save output to logfile
echo "$SECINC" "$CPUUUSR" >> ./logs/cpuusr.dat

#retrieve data, extract desired elements, format and assign to variable
CPUSYS=$(mpstat | awk 'FNR == 4 {print}' | awk "{ print \$5}")

#save output to logfile
echo "$SECINC" "$CPUSYS" >> ./logs/cpusys.dat

#retrieve data, extract desired elements, format and assign to variable
CPUIDL=$(mpstat | awk 'FNR == 4 {print}' | awk "{ print \$12}" | cut -c1-2)

#add decimal place 
CPUPCT=.$CPUIDL

#save output to logfile
echo "$SECINC" "$CPUPCT" >> ./logs/cpuidl.dat
    
#inform user
printf "\\n-  -  -   -   -   -   -   - EXITING - -   -   -   -   -   -   -   -  "

#psercentages to graph display and save to png
#plot cpu
gnuplot -e "set title \"CPU USAGE\"; set ylabel \"PERCENTAGE\"; set xlabel \"SECONDS\"; 
plot \"./logs/cpuusr.dat\" using 2 title 'USER' with lines, \
\"./logs/cpusys.dat\" using 2 title 'SYSTEM' with lines, \
\"./logs/cpufreq.dat\" using 2 title 'cpu-freq (GHZ)' with lines, \
\"./logs/cpuidl.dat\" using 2 title 'IDLE' with lines; pause -1; set term png size 700,700; set output \"./graph_images/CPUUSAGE.png\"; replot;"

#plot cpu and gpu temp
gnuplot -e "set title \"GPU TEMP\"; set ylabel \"TEMP DEGREES\"; set xlabel \"SECONDS\"; plot \"./logs/cputemp.dat\" using 2 title 'CPUTEMP' with lines, \
\"./logs/gputemp.dat\" using 2 title 'GPUTEMP' with lines; pause -1; set term png size 700,700; set output \"./graph_images/TEMPS.png\"; replot;"

#plot memory in Gi
gnuplot -e "set title \"MAIN MEMORY\"; set ylabel \"Gi\"; set xlabel \"SECONDS\"; 
plot \"./logs/mmto.dat\" using 2 title 'mem-total' with lines, \
\"./logs/mmfr.dat\" using 2 title 'mem-free' with lines, \
\"./logs/mmca.dat\" using 2 title 'mem-cache' with lines, \
\"./logs/mmav.dat\" using 2 title 'mem-avail' with lines; pause -1; set term png size 700,700; set output \"./graph_images/MAINMEM.png\"; replot;"

#plot memory in Mi
gnuplot -e "set title \"SWAP MEMORY\"; set ylabel \"Mi\"; set xlabel \"SECONDS\"; 
plot \"./logs/mmus.dat\" using 2 title 'mem-used' with lines, \
\"./logs/mmsh.dat\" using 2 title 'mem-shared' with lines, \
\"./logs/mmswto.dat\" using 2 title 'swap-total' with lines, \
\"./logs/mswus.dat\" using 2 title 'swap-used' with lines, \
\"./logs/mmswfr.dat\" using 2 title 'swap-free' with lines; pause -1; set term png size 700,700; set output \"./graph_images/SWAPMEM.png\"; replot;" 

#delay to make sequence change obvious    
sleep 1

#inform user
printf "\\n-  -  -   -   -  - LOG @ ./logs/ , IMG @ ./images/ - -   -   -   -   -   -   "
printf "\\n-  -  -   -   -   -   -  - PROFILER CLOSED - -   -   -   -   -   -   -   -   "
printf "\\n-  -  -   -   -   -   - - ENTER TO CONSOLE - -   -   -   -   -    -   -   -   "

#exit and set code
exit 0

}

#inform user
printf "\\n-  -   - 	-	-   -	- STARTING PROFILER - -   -   -   -   -   -   -   -   "

#inform user
printf "\\nsysstat is required"

#inform user
printf "\\nchecking if installed"

#check if sysstat is installed
if ! dpkg -s sysstat &> /dev/null

#if not installed, update and install
then

#inform user
printf "\\nnot installed - installing"  

#update os
sudo apt-get update

#install systat
sudo apt-get install sysstat

#inform user
printf "\\installed - continuing"

#if installed continue without installing
else

#inform user
printf    "\\ninstalled"

#finish installation confirmation sequence
fi

#inform user
printf "\\n-  -  -   -   -   -   -  - PROFILER RUNNING - -   -   -   -  -   -   -  -"
printf "\\n-  -  -   -   -   -  - ENTER OR CTRL+Z FOR CONSOLE -  -   -    -   -   -  -"
printf "\\n-   -  -  -TO EXIT TYPE \"kill -USR1 %s\" AND PRESS ENTER- -  -   -  -  -  -" $$
printf  "\\n-  -  -   -   -   -  - ENTER OR CTRL+Z FOR CONSOLE -  -   -    -   -   -   -"


#initiate increment
SECINC=0

#clear old logs
rm -r ./logs/*

#loop functions to collect metrics every one second
while true ; do

#get cpu temp, format data and save to log
CPUTEMP=$(awk '{print $1}' /sys/class/thermal/thermal_zone0/temp | cut -c1-2 ).$(awk '{print $1}' /sys/class/thermal/thermal_zone0/temp | cut -c3-4)

#save output to logfile
echo "$SECINC" "$CPUTEMP" >> ./logs/cputemp.dat

#get gpu temp, format data and save to log
GPUTMP=$( (vcgencmd measure_temp) | cut -c6-9) 

#save output to logfile
echo "$SECINC" "$GPUTMP" >> ./logs/gputemp.dat

#get cpu freq, format data and save to log
CLOCKHZ=$( (vcgencmd measure_clock arm) | cut -c15-25) 

#MHZ divisor
MHZDV=100000000 

#processing data to represent MHZ
CLKMHZ=$((CLOCKHZ / MHZDV)) 

#save output to logfile
echo "$SECINC" "$CLKMHZ" >> ./logs/cpufreq.dat

MMTO=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$1}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMTO"  >> ./logs/mmto.dat

#retrieve data, extract desired elements, format and assign to variable
MMUS=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$2}" | cut -c 1-2 )

#save output to logfile
echo "$SECINC" "$MMUS"  >> ./logs/mmus.dat

#retrieve data, extract desired elements, format and assign to variable
MMFR=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$3}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMFR"  >> ./logs/mmfr.dat

#retrieve data, extract desired elements, format and assign to variable
MMSH=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$4}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMSH"  >> ./logs/mmsh.dat

#retrieve data, extract desired elements, format and assign to variable
MMCA=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$5}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMCA"  >> ./logs/mmca.dat

#retrieve data, extract desired elements, format and assign to variable
MMAV=$( free -h | cut -c13-80 | awk "(FNR>1 && FNR<3)" | awk "{ print \$6}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MMAV"  >> ./logs/mmav.dat

#retrieve data, extract desired elements, format and assign to variable
MSWTO=$( free -h | cut -c13-80 | awk "(FNR>2 && FNR<4)" | awk "{ print \$1}" | cut -c 1-2 )

#save output to logfile
echo "$SECINC" "$MSWTO"  >> ./logs/mmswto.dat

#retrieve data, extract desired elements, format and assign to variable
MSWUS=$( free -h | cut -c13-80 | awk "(FNR>2 && FNR<4)" | awk "{ print \$2}" | cut -c 1-3 )

#save output to logfile
echo "$SECINC" "$MSWUS"  >> ./logs/mswus.dat

#retrieve data, extract desired elements, format and assign to variable
MSWFR=$( free -h | cut -c13-80 | awk "(FNR>2 && FNR<4)" | awk "{ print \$3}" | cut -c 1-2 )

#save output to logfile
echo "$SECINC" "$MSWFR"  >> ./logs/mmswfr.dat

#retrieve data, extract desired elements, format and assign to variable
CPUUUSR=$(mpstat | awk 'FNR == 4 {print}' | awk "{ print \$3}")

#save to logfile
echo "$SECINC" "$CPUUUSR" >> ./logs/cpuusr.dat

#retrieve data, extract desired elements, format and assign to variable
CPUSYS=$(mpstat | awk 'FNR == 4 {print}' | awk "{ print \$5}")

#save output to logfile
echo "$SECINC" "$CPUSYS" >> ./logs/cpusys.dat

#retrieve data, extract desired elements, format and assign to variable
CPUIDL=$(mpstat | awk 'FNR == 4 {print}' | awk "{ print \$12}" | cut -c1-2)

#add decimal place 
CPUPCT=.$CPUIDL

#save output to logfile
echo "$SECINC" "$CPUPCT" >> ./logs/cpuidl.dat

#delay timer
sleep 1

#increment seconds
(( SECINC++ ))

#loop complete
done
